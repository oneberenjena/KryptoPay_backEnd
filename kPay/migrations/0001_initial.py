# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-08-13 04:40
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('second_name', models.CharField(blank=True, max_length=50, null=True)),
                ('second_last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('ci', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True)),
                ('tlf', models.CharField(blank=True, max_length=15, null=True)),
                ('birthdate', models.DateField(null=True)),
            ],
            options={
                'db_table': 'worker',
                'verbose_name': 'Worker',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Commerce',
            fields=[
                ('commerce_name', models.CharField(max_length=256)),
                ('rif', models.PositiveIntegerField(primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tlf', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'commerce',
                'verbose_name': 'Commerce',
            },
        ),
        migrations.CreateModel(
            name='Crypto',
            fields=[
                ('cryptoName', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'crypto',
                'verbose_name': 'Crypto Currency',
                'verbose_name_plural': 'Crypto Currencies',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_num', models.IntegerField()),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('amount_bs', models.DecimalField(decimal_places=2, max_digits=100)),
                ('amount_crypto', models.DecimalField(decimal_places=8, max_digits=100)),
                ('tx_id', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'db_table': 'transaction',
                'verbose_name': 'Transaction',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin',
                'verbose_name': 'Commerce Admin',
            },
            bases=('kPay.worker',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cashier',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('admin', models.ManyToManyField(blank=True, related_name='admin', to='kPay.Admin')),
            ],
            options={
                'db_table': 'cashier',
                'verbose_name': 'Commerce Cashier',
            },
            bases=('kPay.worker',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='transaction',
            name='cashier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='transaction',
            name='commerce',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kPay.Commerce'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='crypto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction', to='kPay.Crypto'),
        ),
        migrations.AddField(
            model_name='commerce',
            name='cryptos',
            field=models.ManyToManyField(blank=True, related_name='commerces', through='kPay.Transaction', to='kPay.Crypto'),
        ),
        migrations.AddField(
            model_name='worker',
            name='commerce',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commerce', to='kPay.Commerce'),
        ),
        migrations.AddField(
            model_name='worker',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='worker',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='transaction',
            unique_together=set([('commerce', 'ref_num')]),
        ),
        migrations.AlterUniqueTogether(
            name='worker',
            unique_together=set([('ci', 'commerce')]),
        ),
    ]
